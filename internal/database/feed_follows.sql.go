// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const followExists = `-- name: FollowExists :one

SELECT created_at, updated_at, user_id, feed_id FROM feed_follows WHERE feed_id = $1 AND user_id = $2
`

type FollowExistsParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) FollowExists(ctx context.Context, arg FollowExistsParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, followExists, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const followFeed = `-- name: FollowFeed :one
INSERT INTO feed_follows(feed_id, user_id, created_at, updated_at)
VALUES($1, $2, $3, $4)
RETURNING created_at, updated_at, user_id, feed_id
`

type FollowFeedParams struct {
	FeedID    uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) FollowFeed(ctx context.Context, arg FollowFeedParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, followFeed,
		arg.FeedID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FeedFollow
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getUserFeeds = `-- name: GetUserFeeds :many

SELECT created_at, updated_at, user_id, feed_id 
FROM feed_follows
WHERE user_id = $1
ORDER BY updated_at DESC
`

// -
func (q *Queries) GetUserFeeds(ctx context.Context, userID uuid.UUID) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeeds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :exec

DELETE FROM feed_follows
WHERE 
    feed_id = $1
    AND 
    user_id = $2
`

type UnfollowFeedParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFeed, arg.FeedID, arg.UserID)
	return err
}
